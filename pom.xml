<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>gr.ntua.ece.cslab</groupId>
    <artifactId>e2data-scheduler</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <jersey2.version>2.28</jersey2.version>
        <jaxrs.version>2.1</jaxrs.version>
        <gson.version>2.8.5</gson.version>
        <moea.version>2.12</moea.version>
        <jetty.version>9.3.27.v20190418</jetty.version>
        <flink.version>1.11.1</flink.version>
    </properties>

    <dependencies>
        <dependency> <!-- Unused declared dependency -->
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <type>jar</type>
            <scope>provided</scope>
        </dependency>
        <!-- Jersey 2 dependencies-->
        <dependency> <!-- Unused declared dependency -->
            <groupId>org.glassfish.jersey.containers</groupId>
            <!-- if your container implements Servlet API older than 3.0, use "jersey-container-servlet-core"  -->
            <artifactId>jersey-container-servlet</artifactId>
            <version>${jersey2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-server</artifactId>
            <version>${jersey2.version}</version>
        </dependency>
        <dependency> <!-- Unused declared dependency -->
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>${jaxrs.version}</version>
        </dependency>
        <dependency> <!-- Unused declared dependency -->
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <version>${jersey2.version}</version>
        </dependency>
        <dependency> <!-- Unused declared dependency -->
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-grizzly2-servlet</artifactId>
            <version>${jersey2.version}</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.containers</groupId>-->
<!--            <artifactId>jersey-container-jetty-http</artifactId>-->
<!--            <version>${jersey2.version}</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>${jersey2.version}</version>
        </dependency>
<!--        <dependency>--> <!--<!- Used undeclared dependency ->-->
<!--            <groupId>com.fasterxml.jackson.core</groupId>-->
<!--            <artifactId>jackson-annotations</artifactId>-->
<!--            <version>2.9.8</version>-->
<!--        </dependency>-->
<!--        <dependency>--> <!--<!- Used undeclared dependency ->-->
<!--            <groupId>jakarta.ws.rs</groupId>-->
<!--            <artifactId>jakarta.ws.rs-api</artifactId>-->
<!--            <version>2.1.5</version>-->
<!--        </dependency>-->
<!--        <dependency>--> <!--<!- Used undeclared dependency ->-->
<!--            <groupId>org.glassfish.jersey.containers</groupId>-->
<!--            <artifactId>jersey-container-servlet-core</artifactId>-->
<!--            <version>${jersey2.version}</version>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>com.fasterxml.jackson.jaxrs</groupId>-->
<!--            <artifactId>jackson-jaxrs-json-provider</artifactId>-->
<!--            <version>2.9.8</version>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.media</groupId>-->
<!--            <artifactId>jersey-media-moxy</artifactId>-->
<!--            <version>${jersey2.version}</version>-->
<!--        </dependency>-->

        <!-- NOTE(ckatsak): This lets us use multipart features (for JobGraph file uploading) -->
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
            <version>${jersey2.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.moeaframework/moeaframework -->
        <dependency>
            <groupId>org.moeaframework</groupId>
            <artifactId>moeaframework</artifactId>
            <version>${moea.version}</version>
        </dependency>
        <!-- GSON Json Parser -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency>

        <!-- Embedded Jetty -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlet</artifactId>
            <version>${jetty.version}</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.eclipse.jetty</groupId>-->
<!--            <artifactId>jetty-util</artifactId>-->
<!--            <version>${jetty.version}</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.version}</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/org.apache.flink/flink-runtime -->
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-runtime_2.12</artifactId>
            <version>${flink.version}</version>
            <scope>compile</scope>
        </dependency>


    </dependencies>

    <build>
        <finalName>scheduler</finalName>
        <pluginManagement>
            <plugins>

                <!-- plugin to configure logging in the Jetty server -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <version>1.0.0</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>set-system-properties</goal>
                            </goals>
                            <configuration>
                                <properties>
                                    <property>
                                        <name>org.eclipse.jetty.util.log.class</name>
                                        <value>org.eclipse.jetty.util.log.StdErrLog</value>
                                    </property>
                                    <property>
                                        <name>org.eclipse.jetty.LEVEL</name>
                                        <value>INFO</value>
                                    </property>
                                </properties>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- plugin to automatically deploy an embedded Jetty server:
                     $ mvn jetty:run
                     $ mvn jetty:run-forked -->
                <plugin>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <version>${jetty.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.6.0</version>
                    <executions>
                        <execution><goals><goal>java</goal></goals></execution>
                    </executions>
                    <configuration>
                        <mainClass>gr.ntua.ece.cslab.e2datascheduler.server.HaierServer</mainClass>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>3.1.1</version>
                    <configuration>
                    </configuration>
                </plugin>

                <!-- Create a single executable fat JAR -->
                <plugin>
                    <!--<groupId>org.apache.maven.plugins</groupId>  NOTE(ckatsak): Not required here -->
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.3.0</version>
                    <configuration>
                        <!-- Use default descriptor for producing a fat JAR
                            (http://maven.apache.org/plugins/maven-assembly-plugin/usage.html) -->
                        <descriptorRefs>
                            <descriptorRef>jar-with-dependencies</descriptorRef>
                        </descriptorRefs>
                        <!-- Use `maven-archiver` to produce a manifest indicating where Main is
                            (http://maven.apache.org/plugins/maven-assembly-plugin/usage.html) -->
                        <archive>
                            <manifest>
                                <mainClass>gr.ntua.ece.cslab.e2datascheduler.server.HaierServer</mainClass>
                            </manifest>
                        </archive>
                    </configuration>
                    <executions>
                        <!-- Bind `assembly:single` goal to `package` phase
                            (http://maven.apache.org/plugins/maven-assembly-plugin/usage.html) -->
                        <execution>
                            <id>make-assembly</id> <!-- this is used for inheritance merges -->
                            <phase>package</phase> <!-- bind to the packaging phase... -->
                            <goals>
                                <goal>single</goal> <!-- ...the `single` goal -->
                            </goals>
                        </execution>
                    </executions>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>



</project>
